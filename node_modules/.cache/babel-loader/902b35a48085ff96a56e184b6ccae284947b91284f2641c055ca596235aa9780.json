{"ast":null,"code":"import fs from 'fs';\nimport Papa from 'papaparse';\n\n// Function to create a restaurant object\nfunction createRestaurant(name, locations, cuisine, specials, website) {\n  return {\n    name: name,\n    location: locations,\n    cuisine: cuisine,\n    specials: specials,\n    website: website\n  };\n}\nexport const restaurantsList = [];\n\n// Read the entire file into memory\nfs.readFile('restaurants.csv', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n\n  // Parse the CSV data with PapaParse\n  Papa.parse(data, {\n    header: true,\n    complete: results => {\n      results.data.forEach(row => {\n        // Parse each row and create a restaurant object\n        const specials = {};\n        // Parse specials for each day of the week\n        for (const day of Object.keys(row)) {\n          if (day !== 'name' && day !== 'location' && day !== 'cuisine' && day !== 'Website') {\n            specials[day] = row[day] || ''; // Assign empty string if no special for that day\n          }\n        }\n        const restaurant = createRestaurant(row.name, row.location.split(',').map(loc => loc.trim()),\n        // Assuming locations are comma-separated\n        row.cuisine, specials, row.Website);\n        restaurantsList.push(restaurant);\n      });\n      console.log(restaurantsList);\n      // Do whatever you need to do with the restaurantsList array here\n    }\n  });\n});\n\n// Static properties\nexport const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nconst allLocations = restaurantsList.reduce((locations, restaurant) => {\n  restaurant.location.forEach(location => {\n    if (!locations.includes(location)) {\n      locations.push(location);\n    }\n  });\n  return locations;\n}, []);\nexport const locationOptions = ['All', ...allLocations];\nexport const cuisineOptions = ['All', 'Italian', 'Mexican', 'American', 'Japanese'];","map":{"version":3,"names":["fs","Papa","createRestaurant","name","locations","cuisine","specials","website","location","restaurantsList","readFile","err","data","console","error","parse","header","complete","results","forEach","row","day","Object","keys","restaurant","split","map","loc","trim","Website","push","log","daysOfWeek","allLocations","reduce","includes","locationOptions","cuisineOptions"],"sources":["/Users/ruship/atlanta-specials/src/common/commonComponents.js"],"sourcesContent":["import fs from 'fs';\nimport Papa from 'papaparse';\n\n// Function to create a restaurant object\nfunction createRestaurant(name, locations, cuisine, specials, website) {\n    return {\n        name: name,\n        location: locations,\n        cuisine: cuisine,\n        specials: specials,\n        website: website\n    };\n}\n\nexport const restaurantsList = [];\n\n// Read the entire file into memory\nfs.readFile('restaurants.csv', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n  \n  // Parse the CSV data with PapaParse\n  Papa.parse(data, {\n    header: true,\n    complete: (results) => {\n      results.data.forEach(row => {\n        // Parse each row and create a restaurant object\n        const specials = {};\n        // Parse specials for each day of the week\n        for (const day of Object.keys(row)) {\n          if (day !== 'name' && day !== 'location' && day !== 'cuisine' && day !== 'Website') {\n            specials[day] = row[day] || ''; // Assign empty string if no special for that day\n          }\n        }\n        const restaurant = createRestaurant(\n          row.name,\n          row.location.split(',').map(loc => loc.trim()), // Assuming locations are comma-separated\n          row.cuisine,\n          specials,\n          row.Website\n        );\n        restaurantsList.push(restaurant);\n      });\n      \n      console.log(restaurantsList);\n      // Do whatever you need to do with the restaurantsList array here\n    }\n  });\n});\n\n// Static properties\nexport const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nconst allLocations = restaurantsList.reduce((locations, restaurant) => {\n    restaurant.location.forEach(location => {\n        if (!locations.includes(location)) {\n            locations.push(location);\n        }\n    });\n    return locations;\n}, []);\n\nexport const locationOptions = ['All', ...allLocations];\nexport const cuisineOptions = ['All', 'Italian', 'Mexican', 'American', 'Japanese'];\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,IAAI;AACnB,OAAOC,IAAI,MAAM,WAAW;;AAE5B;AACA,SAASC,gBAAgBA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACnE,OAAO;IACHJ,IAAI,EAAEA,IAAI;IACVK,QAAQ,EAAEJ,SAAS;IACnBC,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA,QAAQ;IAClBC,OAAO,EAAEA;EACb,CAAC;AACL;AAEA,OAAO,MAAME,eAAe,GAAG,EAAE;;AAEjC;AACAT,EAAE,CAACU,QAAQ,CAAC,iBAAiB,EAAE,MAAM,EAAE,CAACC,GAAG,EAAEC,IAAI,KAAK;EACpD,IAAID,GAAG,EAAE;IACPE,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEH,GAAG,CAAC;IACzC;EACF;;EAEA;EACAV,IAAI,CAACc,KAAK,CAACH,IAAI,EAAE;IACfI,MAAM,EAAE,IAAI;IACZC,QAAQ,EAAGC,OAAO,IAAK;MACrBA,OAAO,CAACN,IAAI,CAACO,OAAO,CAACC,GAAG,IAAI;QAC1B;QACA,MAAMd,QAAQ,GAAG,CAAC,CAAC;QACnB;QACA,KAAK,MAAMe,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,EAAE;UAClC,IAAIC,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,UAAU,IAAIA,GAAG,KAAK,SAAS,IAAIA,GAAG,KAAK,SAAS,EAAE;YAClFf,QAAQ,CAACe,GAAG,CAAC,GAAGD,GAAG,CAACC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;UAClC;QACF;QACA,MAAMG,UAAU,GAAGtB,gBAAgB,CACjCkB,GAAG,CAACjB,IAAI,EACRiB,GAAG,CAACZ,QAAQ,CAACiB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;QAAE;QAChDR,GAAG,CAACf,OAAO,EACXC,QAAQ,EACRc,GAAG,CAACS,OACN,CAAC;QACDpB,eAAe,CAACqB,IAAI,CAACN,UAAU,CAAC;MAClC,CAAC,CAAC;MAEFX,OAAO,CAACkB,GAAG,CAACtB,eAAe,CAAC;MAC5B;IACF;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMuB,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;AAExG,MAAMC,YAAY,GAAGxB,eAAe,CAACyB,MAAM,CAAC,CAAC9B,SAAS,EAAEoB,UAAU,KAAK;EACnEA,UAAU,CAAChB,QAAQ,CAACW,OAAO,CAACX,QAAQ,IAAI;IACpC,IAAI,CAACJ,SAAS,CAAC+B,QAAQ,CAAC3B,QAAQ,CAAC,EAAE;MAC/BJ,SAAS,CAAC0B,IAAI,CAACtB,QAAQ,CAAC;IAC5B;EACJ,CAAC,CAAC;EACF,OAAOJ,SAAS;AACpB,CAAC,EAAE,EAAE,CAAC;AAEN,OAAO,MAAMgC,eAAe,GAAG,CAAC,KAAK,EAAE,GAAGH,YAAY,CAAC;AACvD,OAAO,MAAMI,cAAc,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}