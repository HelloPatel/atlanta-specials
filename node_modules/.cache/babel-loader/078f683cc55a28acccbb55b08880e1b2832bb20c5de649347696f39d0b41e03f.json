{"ast":null,"code":"import Papa from 'papaparse';\n\n// Function to create a restaurant object\nfunction createRestaurant(name, locations, cuisine, specials, website) {\n  return {\n    name: name,\n    location: locations,\n    cuisine: cuisine,\n    specials: specials,\n    website: website\n  };\n}\nexport const restaurantsList = [];\nfs.createReadStream('tests.csv').pipe(Papa.parse(Papa.NODE_STREAM_INPUT, {\n  header: true\n})) // Assuming headers are present in the CSV\n.on('data', row => {\n  // Parse each row and create a restaurant object\n  const specials = {};\n  // Parse specials for each day of the week\n  for (const day of Object.keys(row.data)) {\n    if (day !== 'name' && day !== 'location' && day !== 'cuisine' && day !== 'Website') {\n      specials[day] = row.data[day] || ''; // Assign empty string if no special for that day\n    }\n  }\n  const restaurant = createRestaurant(row.data.name, row.data.location.split(',').map(loc => loc.trim()),\n  // Assuming locations are comma-separated\n  row.data.cuisine, specials, row.data.Website);\n  restaurantsList.push(restaurant);\n}).on('end', () => {\n  console.log(restaurantsList);\n  // Do whatever you need to do with the restaurantsList array here\n});\n\n// Static properties\nexport const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nconst allLocations = restaurantsList.reduce((locations, restaurant) => {\n  restaurant.location.forEach(location => {\n    if (!locations.includes(location)) {\n      locations.push(location);\n    }\n  });\n  return locations;\n}, []);\nexport const locationOptions = ['All', ...allLocations];\nexport const cuisineOptions = ['All', 'Italian', 'Mexican', 'American', 'Japanese'];","map":{"version":3,"names":["Papa","createRestaurant","name","locations","cuisine","specials","website","location","restaurantsList","fs","createReadStream","pipe","parse","NODE_STREAM_INPUT","header","on","row","day","Object","keys","data","restaurant","split","map","loc","trim","Website","push","console","log","daysOfWeek","allLocations","reduce","forEach","includes","locationOptions","cuisineOptions"],"sources":["/Users/ruship/atlanta-specials/src/common/commonComponents.js"],"sourcesContent":["\nimport Papa from 'papaparse';\n\n// Function to create a restaurant object\nfunction createRestaurant(name, locations, cuisine, specials, website) {\n    return {\n        name: name,\n        location: locations,\n        cuisine: cuisine,\n        specials: specials,\n        website: website\n    };\n}\n\nexport const restaurantsList = [];\n\nfs.createReadStream('tests.csv')\n  .pipe(Papa.parse(Papa.NODE_STREAM_INPUT, { header: true })) // Assuming headers are present in the CSV\n  .on('data', (row) => {\n    // Parse each row and create a restaurant object\n    const specials = {};\n    // Parse specials for each day of the week\n    for (const day of Object.keys(row.data)) {\n      if (day !== 'name' && day !== 'location' && day !== 'cuisine' && day !== 'Website') {\n        specials[day] = row.data[day] || ''; // Assign empty string if no special for that day\n      }\n    }\n    const restaurant = createRestaurant(\n      row.data.name,\n      row.data.location.split(',').map(loc => loc.trim()), // Assuming locations are comma-separated\n      row.data.cuisine,\n      specials,\n      row.data.Website\n    );\n    restaurantsList.push(restaurant);\n  })\n  .on('end', () => {\n    console.log(restaurantsList);\n    // Do whatever you need to do with the restaurantsList array here\n  });\n\n// Static properties\nexport const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nconst allLocations = restaurantsList.reduce((locations, restaurant) => {\n    restaurant.location.forEach(location => {\n        if (!locations.includes(location)) {\n            locations.push(location);\n        }\n    });\n    return locations;\n}, []);\n\nexport const locationOptions = ['All', ...allLocations];\nexport const cuisineOptions = ['All', 'Italian', 'Mexican', 'American', 'Japanese'];\n"],"mappings":"AACA,OAAOA,IAAI,MAAM,WAAW;;AAE5B;AACA,SAASC,gBAAgBA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACnE,OAAO;IACHJ,IAAI,EAAEA,IAAI;IACVK,QAAQ,EAAEJ,SAAS;IACnBC,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA,QAAQ;IAClBC,OAAO,EAAEA;EACb,CAAC;AACL;AAEA,OAAO,MAAME,eAAe,GAAG,EAAE;AAEjCC,EAAE,CAACC,gBAAgB,CAAC,WAAW,CAAC,CAC7BC,IAAI,CAACX,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACa,iBAAiB,EAAE;EAAEC,MAAM,EAAE;AAAK,CAAC,CAAC,CAAC,CAAC;AAAA,CAC3DC,EAAE,CAAC,MAAM,EAAGC,GAAG,IAAK;EACnB;EACA,MAAMX,QAAQ,GAAG,CAAC,CAAC;EACnB;EACA,KAAK,MAAMY,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACH,GAAG,CAACI,IAAI,CAAC,EAAE;IACvC,IAAIH,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,UAAU,IAAIA,GAAG,KAAK,SAAS,IAAIA,GAAG,KAAK,SAAS,EAAE;MAClFZ,QAAQ,CAACY,GAAG,CAAC,GAAGD,GAAG,CAACI,IAAI,CAACH,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IACvC;EACF;EACA,MAAMI,UAAU,GAAGpB,gBAAgB,CACjCe,GAAG,CAACI,IAAI,CAAClB,IAAI,EACbc,GAAG,CAACI,IAAI,CAACb,QAAQ,CAACe,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAAE;EACrDT,GAAG,CAACI,IAAI,CAAChB,OAAO,EAChBC,QAAQ,EACRW,GAAG,CAACI,IAAI,CAACM,OACX,CAAC;EACDlB,eAAe,CAACmB,IAAI,CAACN,UAAU,CAAC;AAClC,CAAC,CAAC,CACDN,EAAE,CAAC,KAAK,EAAE,MAAM;EACfa,OAAO,CAACC,GAAG,CAACrB,eAAe,CAAC;EAC5B;AACF,CAAC,CAAC;;AAEJ;AACA,OAAO,MAAMsB,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;AAExG,MAAMC,YAAY,GAAGvB,eAAe,CAACwB,MAAM,CAAC,CAAC7B,SAAS,EAAEkB,UAAU,KAAK;EACnEA,UAAU,CAACd,QAAQ,CAAC0B,OAAO,CAAC1B,QAAQ,IAAI;IACpC,IAAI,CAACJ,SAAS,CAAC+B,QAAQ,CAAC3B,QAAQ,CAAC,EAAE;MAC/BJ,SAAS,CAACwB,IAAI,CAACpB,QAAQ,CAAC;IAC5B;EACJ,CAAC,CAAC;EACF,OAAOJ,SAAS;AACpB,CAAC,EAAE,EAAE,CAAC;AAEN,OAAO,MAAMgC,eAAe,GAAG,CAAC,KAAK,EAAE,GAAGJ,YAAY,CAAC;AACvD,OAAO,MAAMK,cAAc,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}