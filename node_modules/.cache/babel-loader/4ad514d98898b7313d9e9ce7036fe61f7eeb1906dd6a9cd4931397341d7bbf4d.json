{"ast":null,"code":"import Papa from 'papaparse';\n\n// Function to create a restaurant object\nfunction createRestaurant(name, locations, cuisine, specials, website) {\n  return {\n    name: name,\n    location: locations,\n    cuisine: cuisine,\n    specials: specials,\n    website: website\n  };\n}\nexport const restaurantsList = [];\n\n// Fetch the CSV file or load it from wherever it's available\nconst csvFile = './testCSV.csv'; // Adjust the path to your CSV file\n\n// Parse the CSV data with PapaParse\nPapa.parse(csvFile, {\n  header: true,\n  download: true,\n  complete: results => {\n    console.log(results);\n    results.data.forEach(row => {\n      console.log(row);\n      // Parse each row and create a restaurant object\n      const specials = {};\n      // Parse specials for each day of the week\n      for (const day of Object.keys(row)) {\n        if (day !== 'name' && day !== 'location' && day !== 'cuisine' && day !== 'Website') {\n          specials[day] = row[day] || ''; // Assign empty string if no special for that day\n        }\n      }\n      const restaurant = createRestaurant(row.name, row.location.split(',').map(loc => loc.trim()),\n      // Assuming locations are comma-separated\n      row.cuisine, specials, row.Website);\n      restaurantsList.push(restaurant);\n    });\n    console.log(restaurantsList);\n    // Do whatever you need to do with the restaurantsList array here\n  }\n});\n\n// Static properties\nexport const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nconst allLocations = restaurantsList.reduce((locations, restaurant) => {\n  restaurant.location.forEach(location => {\n    if (!locations.includes(location)) {\n      locations.push(location);\n    }\n  });\n  return locations;\n}, []);\nexport const locationOptions = ['All', ...allLocations];\nexport const cuisineOptions = ['All', 'Italian', 'Mexican', 'American', 'Japanese'];","map":{"version":3,"names":["Papa","createRestaurant","name","locations","cuisine","specials","website","location","restaurantsList","csvFile","parse","header","download","complete","results","console","log","data","forEach","row","day","Object","keys","restaurant","split","map","loc","trim","Website","push","daysOfWeek","allLocations","reduce","includes","locationOptions","cuisineOptions"],"sources":["/Users/ruship/atlanta-specials/src/common/commonComponents.js"],"sourcesContent":["import Papa from 'papaparse';\n\n// Function to create a restaurant object\nfunction createRestaurant(name, locations, cuisine, specials, website) {\n    return {\n        name: name,\n        location: locations,\n        cuisine: cuisine,\n        specials: specials,\n        website: website\n    };\n}\n\nexport const restaurantsList = [];\n\n// Fetch the CSV file or load it from wherever it's available\nconst csvFile = './testCSV.csv'; // Adjust the path to your CSV file\n\n// Parse the CSV data with PapaParse\nPapa.parse(csvFile, {\n  header: true,\n  download: true,\n  complete: (results) => {\n    console.log(results)\n    results.data.forEach(row => {\n      console.log(row)\n      // Parse each row and create a restaurant object\n      const specials = {};\n      // Parse specials for each day of the week\n      for (const day of Object.keys(row)) {\n        if (day !== 'name' && day !== 'location' && day !== 'cuisine' && day !== 'Website') {\n          specials[day] = row[day] || ''; // Assign empty string if no special for that day\n        }\n      }\n      const restaurant = createRestaurant(\n        row.name,\n        row.location.split(',').map(loc => loc.trim()), // Assuming locations are comma-separated\n        row.cuisine,\n        specials,\n        row.Website\n      );\n      restaurantsList.push(restaurant);\n    });\n    \n    console.log(restaurantsList);\n    // Do whatever you need to do with the restaurantsList array here\n  }\n});\n\n// Static properties\nexport const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nconst allLocations = restaurantsList.reduce((locations, restaurant) => {\n    restaurant.location.forEach(location => {\n        if (!locations.includes(location)) {\n            locations.push(location);\n        }\n    });\n    return locations;\n}, []);\n\nexport const locationOptions = ['All', ...allLocations];\nexport const cuisineOptions = ['All', 'Italian', 'Mexican', 'American', 'Japanese'];\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;;AAE5B;AACA,SAASC,gBAAgBA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACnE,OAAO;IACHJ,IAAI,EAAEA,IAAI;IACVK,QAAQ,EAAEJ,SAAS;IACnBC,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA,QAAQ;IAClBC,OAAO,EAAEA;EACb,CAAC;AACL;AAEA,OAAO,MAAME,eAAe,GAAG,EAAE;;AAEjC;AACA,MAAMC,OAAO,GAAG,eAAe,CAAC,CAAC;;AAEjC;AACAT,IAAI,CAACU,KAAK,CAACD,OAAO,EAAE;EAClBE,MAAM,EAAE,IAAI;EACZC,QAAQ,EAAE,IAAI;EACdC,QAAQ,EAAGC,OAAO,IAAK;IACrBC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACpBA,OAAO,CAACG,IAAI,CAACC,OAAO,CAACC,GAAG,IAAI;MAC1BJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;MAChB;MACA,MAAMd,QAAQ,GAAG,CAAC,CAAC;MACnB;MACA,KAAK,MAAMe,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,EAAE;QAClC,IAAIC,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,UAAU,IAAIA,GAAG,KAAK,SAAS,IAAIA,GAAG,KAAK,SAAS,EAAE;UAClFf,QAAQ,CAACe,GAAG,CAAC,GAAGD,GAAG,CAACC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QAClC;MACF;MACA,MAAMG,UAAU,GAAGtB,gBAAgB,CACjCkB,GAAG,CAACjB,IAAI,EACRiB,GAAG,CAACZ,QAAQ,CAACiB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;MAAE;MAChDR,GAAG,CAACf,OAAO,EACXC,QAAQ,EACRc,GAAG,CAACS,OACN,CAAC;MACDpB,eAAe,CAACqB,IAAI,CAACN,UAAU,CAAC;IAClC,CAAC,CAAC;IAEFR,OAAO,CAACC,GAAG,CAACR,eAAe,CAAC;IAC5B;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMsB,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;AAExG,MAAMC,YAAY,GAAGvB,eAAe,CAACwB,MAAM,CAAC,CAAC7B,SAAS,EAAEoB,UAAU,KAAK;EACnEA,UAAU,CAAChB,QAAQ,CAACW,OAAO,CAACX,QAAQ,IAAI;IACpC,IAAI,CAACJ,SAAS,CAAC8B,QAAQ,CAAC1B,QAAQ,CAAC,EAAE;MAC/BJ,SAAS,CAAC0B,IAAI,CAACtB,QAAQ,CAAC;IAC5B;EACJ,CAAC,CAAC;EACF,OAAOJ,SAAS;AACpB,CAAC,EAAE,EAAE,CAAC;AAEN,OAAO,MAAM+B,eAAe,GAAG,CAAC,KAAK,EAAE,GAAGH,YAAY,CAAC;AACvD,OAAO,MAAMI,cAAc,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}