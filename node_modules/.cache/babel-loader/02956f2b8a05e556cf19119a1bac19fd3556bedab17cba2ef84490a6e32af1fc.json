{"ast":null,"code":"import fs from 'fs';\nimport csv from 'csv-parser';\n\n// Function to create a restaurant object\nfunction createRestaurant(name, locations, cuisine, specials, website) {\n  return {\n    name: name,\n    location: locations,\n    cuisine: cuisine,\n    specials: specials,\n    website: website\n  };\n}\nconst restaurantsList = [];\nfs.createReadStream('restaurants.csv').pipe(csv({\n  separator: '\\t'\n})) // Assuming tab (\\t) is the separator\n.on('data', row => {\n  // Parse each row and create a restaurant object\n  const specials = {};\n  // Parse specials for each day of the week\n  for (const day of Object.keys(row)) {\n    if (day !== 'name' && day !== 'location' && day !== 'cuisine' && day !== 'Website') {\n      specials[day] = row[day] || ''; // Assign empty string if no special for that day\n    }\n  }\n  const restaurant = createRestaurant(row.name, row.location.split(',').map(loc => loc.trim()),\n  // Assuming locations are comma-separated\n  row.cuisine, specials, row.Website);\n  restaurantsList.push(restaurant);\n}).on('end', () => {\n  console.log(restaurantsList);\n  // Do whatever you need to do with the restaurantsList array here\n});\n\n// Static properties\nexport const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nconst allLocations = restaurantsList.reduce((locations, restaurant) => {\n  restaurant.location.forEach(location => {\n    if (!locations.includes(location)) {\n      locations.push(location);\n    }\n  });\n  return locations;\n}, []);\nexport const locationOptions = ['All', ...allLocations];\nexport const cuisineOptions = ['All', 'Italian', 'Mexican', 'American', 'Japanese'];\n\n// Polyfill for stream module\nif (typeof stream === 'undefined') {\n  import('stream-browserify');\n}","map":{"version":3,"names":["fs","csv","createRestaurant","name","locations","cuisine","specials","website","location","restaurantsList","createReadStream","pipe","separator","on","row","day","Object","keys","restaurant","split","map","loc","trim","Website","push","console","log","daysOfWeek","allLocations","reduce","forEach","includes","locationOptions","cuisineOptions","stream"],"sources":["/Users/ruship/atlanta-specials/src/common/commonComponents.js"],"sourcesContent":["import fs from 'fs';\nimport csv from 'csv-parser';\n\n// Function to create a restaurant object\nfunction createRestaurant(name, locations, cuisine, specials, website) {\n    return {\n        name: name,\n        location: locations,\n        cuisine: cuisine,\n        specials: specials,\n        website: website\n    };\n}\n\nconst restaurantsList = [];\n\nfs.createReadStream('restaurants.csv')\n  .pipe(csv({ separator: '\\t' })) // Assuming tab (\\t) is the separator\n  .on('data', (row) => {\n    // Parse each row and create a restaurant object\n    const specials = {};\n    // Parse specials for each day of the week\n    for (const day of Object.keys(row)) {\n      if (day !== 'name' && day !== 'location' && day !== 'cuisine' && day !== 'Website') {\n        specials[day] = row[day] || ''; // Assign empty string if no special for that day\n      }\n    }\n    const restaurant = createRestaurant(\n      row.name,\n      row.location.split(',').map(loc => loc.trim()), // Assuming locations are comma-separated\n      row.cuisine,\n      specials,\n      row.Website\n    );\n    restaurantsList.push(restaurant);\n  })\n  .on('end', () => {\n    console.log(restaurantsList);\n    // Do whatever you need to do with the restaurantsList array here\n  });\n\n// Static properties\nexport const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nconst allLocations = restaurantsList.reduce((locations, restaurant) => {\n    restaurant.location.forEach(location => {\n        if (!locations.includes(location)) {\n            locations.push(location);\n        }\n    });\n    return locations;\n}, []);\n\nexport const locationOptions = ['All', ...allLocations];\nexport const cuisineOptions = ['All', 'Italian', 'Mexican', 'American', 'Japanese'];\n\n// Polyfill for stream module\nif (typeof stream === 'undefined') {\n    import('stream-browserify');\n}\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,IAAI;AACnB,OAAOC,GAAG,MAAM,YAAY;;AAE5B;AACA,SAASC,gBAAgBA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACnE,OAAO;IACHJ,IAAI,EAAEA,IAAI;IACVK,QAAQ,EAAEJ,SAAS;IACnBC,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA,QAAQ;IAClBC,OAAO,EAAEA;EACb,CAAC;AACL;AAEA,MAAME,eAAe,GAAG,EAAE;AAE1BT,EAAE,CAACU,gBAAgB,CAAC,iBAAiB,CAAC,CACnCC,IAAI,CAACV,GAAG,CAAC;EAAEW,SAAS,EAAE;AAAK,CAAC,CAAC,CAAC,CAAC;AAAA,CAC/BC,EAAE,CAAC,MAAM,EAAGC,GAAG,IAAK;EACnB;EACA,MAAMR,QAAQ,GAAG,CAAC,CAAC;EACnB;EACA,KAAK,MAAMS,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,EAAE;IAClC,IAAIC,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,UAAU,IAAIA,GAAG,KAAK,SAAS,IAAIA,GAAG,KAAK,SAAS,EAAE;MAClFT,QAAQ,CAACS,GAAG,CAAC,GAAGD,GAAG,CAACC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IAClC;EACF;EACA,MAAMG,UAAU,GAAGhB,gBAAgB,CACjCY,GAAG,CAACX,IAAI,EACRW,GAAG,CAACN,QAAQ,CAACW,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAAE;EAChDR,GAAG,CAACT,OAAO,EACXC,QAAQ,EACRQ,GAAG,CAACS,OACN,CAAC;EACDd,eAAe,CAACe,IAAI,CAACN,UAAU,CAAC;AAClC,CAAC,CAAC,CACDL,EAAE,CAAC,KAAK,EAAE,MAAM;EACfY,OAAO,CAACC,GAAG,CAACjB,eAAe,CAAC;EAC5B;AACF,CAAC,CAAC;;AAEJ;AACA,OAAO,MAAMkB,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;AAExG,MAAMC,YAAY,GAAGnB,eAAe,CAACoB,MAAM,CAAC,CAACzB,SAAS,EAAEc,UAAU,KAAK;EACnEA,UAAU,CAACV,QAAQ,CAACsB,OAAO,CAACtB,QAAQ,IAAI;IACpC,IAAI,CAACJ,SAAS,CAAC2B,QAAQ,CAACvB,QAAQ,CAAC,EAAE;MAC/BJ,SAAS,CAACoB,IAAI,CAAChB,QAAQ,CAAC;IAC5B;EACJ,CAAC,CAAC;EACF,OAAOJ,SAAS;AACpB,CAAC,EAAE,EAAE,CAAC;AAEN,OAAO,MAAM4B,eAAe,GAAG,CAAC,KAAK,EAAE,GAAGJ,YAAY,CAAC;AACvD,OAAO,MAAMK,cAAc,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;;AAEnF;AACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;EAC/B,MAAM,CAAC,mBAAmB,CAAC;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}